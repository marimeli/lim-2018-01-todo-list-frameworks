{"version":3,"sources":["components/TodoForm.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","props","onAddTodo","state","setState","title","description","handleInputChange","_e$target","target","value","name","defineProperty","react_default","a","createElement","reactstrap_es","onSubmit","type","onChange","placeholder","className","Component","Navigation","todos","href","length","App","deleteTodo","index","window","confirm","filter","i","solveTodo","document","getElementById","hasAttribute","removeAttribute","setAttribute","addTodo","todo","toConsumableArray","concat","alert","_this2","map","md","key","id","onClick","components_Navigation","xs","components_TodoForm","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wfAmEeA,cA/Db,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAQFI,aAAe,SAACC,GACdA,EAAEC,iBACFT,EAAKU,MAAMC,UAAUX,EAAKY,OAC1BZ,EAAKa,SAAS,CACZC,MAAO,GACPC,YAAa,MAdHf,EAmBdgB,kBAAoB,SAACR,GAAM,IAAAS,EACDT,EAAEU,OAAlBC,EADiBF,EACjBE,MAAOC,EADUH,EACVG,KACfpB,EAAKa,SAALZ,OAAAoB,EAAA,EAAApB,CAAA,GAGGmB,EAAOD,KAtBVnB,EAAKY,MAAQ,CACXE,MAAO,GACPC,YAAa,IAJHf,wEA8BZ,OACEsB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,SAAUvB,KAAKI,cAEnBe,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEE,KAAK,OACLP,KAAK,QACLD,MAAOhB,KAAKS,MAAME,MAClBc,SAAUzB,KAAKa,kBACfa,YAAY,eAIhBP,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEE,KAAK,OACLP,KAAK,cACLD,MAAOhB,KAAKS,MAAMG,YAClBa,SAAUzB,KAAKa,kBACfa,YAAY,oBAIhBP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQE,KAAK,SAASG,UAAU,wBAAhC,YAAgER,EAAAC,EAAAC,cAAA,KAAGM,UAAU,uBAA7E,gBAxDWC,aCsBRC,cApBb,SAAAA,IAAc,IAAAhC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,IACZhC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+B,GAAA1B,KAAAH,QACKS,MAAQ,CACXqB,WAHUjC,wEAQZ,OACEsB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKK,UAAU,0DACbR,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASS,KAAK,IAAIJ,UAAU,cACzB3B,KAAKO,MAAMI,MACZQ,EAAAC,EAAAC,cAAA,QAAMM,UAAU,qCAAhB,KAAuD3B,KAAKS,MAAMqB,MAAME,iBAbzDJ,aC2FVK,cAjFb,SAAAA,IAAc,IAAApC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiC,IACZpC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmC,GAAA9B,KAAAH,QAOFkC,WAAa,SAACC,GACRC,OAAOC,QAAQ,6CACjBxC,EAAKa,SAAS,CACZoB,MAAOjC,EAAKY,MAAMqB,MAAMQ,OAAO,SAACjC,EAAGkC,GACjC,OAAOA,IAAMJ,OAZPtC,EAmBd2C,UAAY,SAACL,GACPM,SAASC,eAAe7C,EAAKY,MAAMqB,MAAMK,GAAOxB,OAAOgC,aAAa,SACtEF,SAASC,eAAe7C,EAAKY,MAAMqB,MAAMK,GAAOxB,OAAOiC,gBAAgB,SAGvEH,SAASC,eAAe7C,EAAKY,MAAMqB,MAAMK,GAAOxB,OAAOkC,aAAa,QAAS,WAxBnEhD,EA6BdiD,QAAU,SAACC,GACLA,EAAKpC,MAAMqB,QAAUe,EAAKnC,YAAYoB,OACxCnC,EAAKa,SAAS,CACZoB,MAAMhC,OAAAkD,EAAA,EAAAlD,CAAKD,EAAKY,MAAMqB,OAAjBmB,OAAA,CAAwBF,MAG/BG,MAAM,wBAjCRrD,EAAKY,MAAQ,CACXqB,WAHUjC,wEAuCL,IAAAsD,EAAAnD,KACD8B,EAAQ9B,KAAKS,MAAMqB,MAAMsB,IAAI,SAACL,EAAMR,GACxC,OACEpB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK+B,GAAG,IAAIC,IAAKf,GACfpB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMK,UAAU,oBACdR,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAYyB,EAAKpC,QAEnBQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAciC,GAAIR,EAAKpC,OAAQoC,EAAKnC,cAEtCO,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAEEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQK,UAAU,+BAA+B6B,QAAS,kBAAML,EAAKX,UAAUD,KAC/EpB,EAAAC,EAAAC,cAAA,KAAGM,UAAU,wBADb,KAEAR,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQK,UAAU,mCAAmC6B,QAAS,kBAAML,EAAKjB,WAAWK,KACpFpB,EAAAC,EAAAC,cAAA,KAAGM,UAAU,qBADb,UAQV,OACER,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAACoC,EAAD,CAAY9C,MAAM,oBADpB,IAEEQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKK,UAAU,QACbR,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKoC,GAAG,KAAK/B,UAAU,eACrBR,EAAAC,EAAAC,cAACsC,EAAD,CAAUnD,UAAWR,KAAK8C,WAE5B3B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKoC,GAAG,MACNvC,EAAAC,EAAAC,cAACC,EAAA,EAAD,SAAOQ,EAAP,gBAxEIF,aCDEgC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASzB,SAASC,eAAe,SDuH3C,kBAAmByB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.106a29e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Card, CardBody, Form, FormGroup, Input, Button } from 'reactstrap';\r\n\r\nclass TodoForm extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      title: '',\r\n      description: ''\r\n    };\r\n  };\r\n\r\n  //Función que ejecutará el evento submit del formuñario\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); //evita refrescar la página\r\n    this.props.onAddTodo(this.state);\r\n    this.setState({\r\n      title: '',\r\n      description: ''\r\n    })\r\n  };\r\n\r\n  //Función para capturar el valor que reciba el input que está ejecutándose. \r\n  handleInputChange = (e) => {\r\n    const { value, name } = e.target;\r\n    this.setState({\r\n      //name me permite saber qué input es el que está escribiendo, por el nombre\r\n      //el input(nombre) que tiene que actualizar es el valor que estoy escribiendo\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardBody>\r\n          <Form onSubmit={this.handleSubmit}>\r\n\r\n            <FormGroup>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                value={this.state.title}\r\n                onChange={this.handleInputChange}\r\n                placeholder=\"Título\"\r\n              />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"description\"\r\n                value={this.state.description}\r\n                onChange={this.handleInputChange}\r\n                placeholder=\"Descripción\"\r\n              />\r\n            </FormGroup>\r\n\r\n            <Button type=\"submit\" className=\"btn btn-outline-dark\"> Agregar <i className=\"fas fa-plus-circle\"></i>  </Button>\r\n          </Form>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoForm;","import React, { Component } from 'react';\r\nimport { todos } from '../todos.json'; \r\nimport { Nav, NavLink } from 'reactstrap';\r\n\r\nclass Navigation extends Component {\r\n  constructor() { \r\n    super(); \r\n    this.state = {\r\n      todos\r\n    }\r\n  };\r\n  \r\n  render() {\r\n    return (\r\n      <Nav className=\"navbar navbar-dark bg-secondary justify-content-center\">\r\n        <NavLink href=\"/\" className=\"text-white\">\r\n          {this.props.title}\r\n          <span className=\"badge badge-pill badge-light ml-2\">  {this.state.todos.length}\r\n          </span>\r\n        </NavLink>\r\n      </Nav>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Navigation; ","import React, { Component } from 'react';\nimport './App.css';\n/* import Todos from './components/Todos'; */\nimport { todos } from './todos.json'; // data\nimport TodoForm from './components/TodoForm';\nimport Navigation from './components/Navigation';\nimport {\n  Container, Row, Col, Card, CardHeader, CardBody,\n  CardTitle, CardSubtitle, CardFooter, Button\n} from 'reactstrap';\n/* import TodoCards from './components/TodoCards'; */\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos\n    }\n  };\n\n  //Función para eliminar tareas\n  deleteTodo = (index) => {\n    if (window.confirm('¿Estas segur@ de eliminar esta tarea?')) {\n      this.setState({\n        todos: this.state.todos.filter((e, i) => {\n          return i !== index\n        })\n      });\n    }\n  };\n\n  //Función para resolver tareas como completadas\n  solveTodo = (index) => {\n    if (document.getElementById(this.state.todos[index].title).hasAttribute('class')) {\n      document.getElementById(this.state.todos[index].title).removeAttribute('class')\n    }\n    else {\n      document.getElementById(this.state.todos[index].title).setAttribute('class', 'change');\n    }\n  };\n\n  //Función para agregar tareas \n  addTodo = (todo) => {\n    if (todo.title.length && todo.description.length) {\n      this.setState({\n        todos: [...this.state.todos, todo]\n      })\n    } else {\n      alert('Completa los campos')\n    }\n  };\n\n  render() {\n    const todos = this.state.todos.map((todo, i) => {\n      return (\n        <Col md=\"4\" key={i}>\n          <Card className=\"mt-4 text-center\">\n            <CardHeader>\n              <CardTitle>{todo.title}</CardTitle>\n            </CardHeader>\n            <CardBody>\n              <CardSubtitle id={todo.title}>{todo.description}</CardSubtitle>\n            </CardBody>\n            <CardFooter>\n              {/* <ItemsCards name=\"Borrar\"></ItemsCards> */}\n              <Button className=\"btn btn-outline-success mt-1\" onClick={() => this.solveTodo(i)}> \n              <i className=\"fas fa-check-circle\"></i> </Button>\n              <Button className=\"btn btn-outline-danger ml-2 mt-1\" onClick={() => this.deleteTodo(i)}>\n              <i className=\"fas fa-trash-alt\"></i> </Button>\n            </CardFooter>\n          </Card>\n        </Col>\n      )\n    })\n\n    return (\n      <div className=\"App\" >\n        <Navigation title=\"Lista de tareas\" /> {/* pasandole propiedad y su valor al componente */}\n        <Container>\n          <Row className=\"mt-4\">\n            <Col xs=\"12\" className=\"text-center\">\n              <TodoForm onAddTodo={this.addTodo}></TodoForm>\n            </Col>\n            <Col xs=\"12\">\n              <Row> {todos} </Row>\n            {/*   <Todos/> */}\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}