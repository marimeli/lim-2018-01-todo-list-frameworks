{"version":3,"sources":["components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","props","onAddTodo","state","setState","title","description","handleInputChange","_e$target","target","value","name","console","log","defineProperty","react_default","a","createElement","className","onSubmit","type","onChange","placeholder","Component","App","deleteTodo","index","window","confirm","todos","filter","i","solveTodo","document","getElementById","hasAttribute","removeAttribute","setAttribute","addTodo","todo","length","toConsumableArray","concat","alert","_this2","map","key","id","onClick","href","components_TodoForm","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5cade4a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass TodoForm extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      title: '',\r\n      description: ''\r\n    };\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onAddTodo(this.state);\r\n    this.setState({\r\n      title: '',\r\n      description: ''\r\n    })\r\n  };\r\n\r\n  handleInputChange = (e) => {\r\n    const { value, name } = e.target;\r\n    console.log(value, name);//usando destructuring\r\n    console.log(e.target.value, e.target.name);//forma larga\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n        <form onSubmit={this.handleSubmit} className=\"card-body\">\r\n\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              className=\"form-control\"\r\n              value={this.state.title}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"Title\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"description\"\r\n              className=\"form-control\"\r\n              value={this.state.description}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"Description\"\r\n            />\r\n          </div>\r\n\r\n          <button type=\"submit\" className=\"btn btn-outline-dark\">\r\n            Guardar\r\n          </button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoForm;","import React, { Component } from 'react';\nimport './App.css';\nimport { todos } from './todos.json'; // data\nimport TodoForm from './components/TodoForm'; // subcomponents\n/* import TodoButtons from './components/TodoButtons'; */\n\nclass App extends Component {\n  constructor() { //agregando el estado\n    super(); //el estado es la manera en que nosotros estamos al tanto de la aplicación\n    this.state = {\n      todos\n    }\n  };\n\n  //Función para eliminar tareas\n  deleteTodo = (index) => {\n    if (window.confirm('¿Estas segur@ de eliminar esta tarea?')) {\n      this.setState({\n        todos: this.state.todos.filter((e, i) => {\n          return i !== index\n        })\n      });\n    }\n  };\n\n  //Función para resolver tareas como completadas\n  solveTodo = (index) => {\n    if (document.getElementById(this.state.todos[index].title).hasAttribute('class')) {\n      document.getElementById(this.state.todos[index].title).removeAttribute('class')\n    }\n    else {\n      document.getElementById(this.state.todos[index].title).setAttribute('class', 'change');\n    }\n  };\n\n  //Función para agregar tareas \n  addTodo = (todo) => {\n    if(todo.title.length && todo.description.length ) {\n      this.setState({\n        todos: [...this.state.todos, todo]\n      })\n    } else {\n      alert('Completa los campos')\n    }\n  };\n\n  render() {\n    // console.log(this.state.todos);\n    //aquí se procesarán los datos que luego se mostrarán. Recorremos el arreglo todos\n    const todos = this.state.todos.map((todo, i) => {\n      return (\n        //crear cards de todos\n        <div className=\"col-md-4\" key={i}>\n          <div className=\"card mt-4 text-center\">\n            <div className=\"card-header\">\n              <h3>{todo.title}</h3>\n            </div>\n            <div className=\"card-body\">\n              <div id={todo.title}>\n                <p>{todo.description}</p>\n              </div>\n            </div>\n            <div className=\"card-footer\">\n              <button\n                className=\"btn btn-outline-danger mt-1\"\n                onClick={() => this.deleteTodo(i)}>\n                Borrrar\n              </button>\n              <button\n                className=\"btn btn-outline-success ml-4 mt-1\"\n                onClick={() => this.solveTodo(i)}>\n                Completado\n              </button>\n            </div>\n          </div>\n        </div>\n      )\n    })\n\n    return (\n      //Esto es lo que pintará/mostrará\n      <div className=\"App\" >\n\n        <nav className=\"navbar navbar-dark bg-secondary justify-content-center\">\n          <a href=\"/\" className=\"text-white\">Lista de tareas\n            <span className=\"badge badge-pill badge-light ml-2\">\n              {this.state.todos.length}\n            </span>\n          </a>\n        </nav>\n\n        <div className=\"container\">\n          <div className=\"row mt-4\">\n\n            <div className=\"col-md-4 text-center\">\n              <TodoForm onAddTodo={this.addTodo}></TodoForm>\n            </div>\n\n            <div className=\"col-md-8\">\n              <div className=\"row\">\n                {todos}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}